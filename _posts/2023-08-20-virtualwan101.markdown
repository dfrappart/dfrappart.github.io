---
layout: post
title:  "Azure Virtual WAN 101"
date:   2023-08-20 18:00:00 +0200
year: 2023
categories: Azure Terraform
---

Hi everyone!

Lately, I've been  working with Azure Virtual WAN and I thought that going back on its concepts and why we should use it versus the standard Hub & Spoke with Virtual Network only was a good topic of discussion.

There are a lot of things to consider with Virtual WAN, so there's a chance that It will be a serie rather than a standalone article :grin:.

In this article, as, the title imply, we are just getting started so we will have a look at: 

- Discovering Azure Virtual WAN
- Deploying a basic Hub and Spokes topology with Virtual WAN
- Comparing a Hub & Spoke vith Virtual WAN and the standard Hub & Spoke with VNet only


And that's already quite some stuffs to see so It will all :laughing:

1. Discovering Azure Virtual WAN

So, behind the name Virtual WAN, what Microsoft is proposing is actually a network service that regroups a lot of things, including: 

- Interconnectivity with remote (meaning not in Azure) sites, using either S2S VPN or ExpressRoute, but also with some partner SD-WAN solution
- obvioulsy, Hub & spoke connectivity (and we'll have a look at that in this article) inside Azure regions
- Routing management
- Firewalling options

The service is evolving constantly and new features can be added over time. There's actually an [RSS feed](https://azure.microsoft.com/updates/?category=networking&query=Virtual%20WAN) that can be used, or the [what's new?](https://learn.microsoft.com/en-us/azure/virtual-wan/whats-new) page in the Azure Documentation.


To get started, we need to create a Virtual WAN. Looking at the [az cli documentation](https://learn.microsoft.com/en-us/cli/azure/network/vwan?view=azure-cli-latest#az-network-vwan-create), or the terraform [AzureRM provider](https://registry.terraform.io/providers/hashicorp/azurerm/latest/docs/resources/virtual_wan), we can see that we don't need much in terms of parameters. 

| Required parameters | Optional parameters |
|-|-|
| Name, <br/> Resource Group Name| Location, <br/> Type, <br/> VPN encryption, <br/>Office 365 local breakout category, <br/> Security Provider name, <br/> Branch to branch traffic, <br/> Tags| 

```bash

az network vwan create --name
                       --resource-group
                       [--branch-to-branch-traffic {false, true}]
                       [--disable-vpn-encryption {false, true}]
                       [--location]
                       [--office365-category]
                       [--security-provider-name]
                       [--tags]
                       [--type {Basic, Standard}]

```

![illustration1](/assets/vwan/vwan001.png)

Apart from the required parameter, the `location` also should be specified to deploy in the targeted region. In az cli, if not specified, the location default to the resource group's one.<br/>
The parameter for the `type` allows to choose the sku, which is either `Basic` or `Standard`.<br/>
The difference is quite relevant between the 2 skus. With Basic, the sole available connectivity option is S2S VPN. <br/>
Also, the Firewall options are not available in the basic tier. <br/>.
Without specification, the Virtual WAN is of type `Standard`

Regarding the routing management, this feature is only available with the addition of a virtual hub in the virtual WAN.

Last, while there is a parameter for the security provider in the az cli command, there is no equivalent in the terraform provider. Now about what this parameter, there is not that much information about it, except reference to the available security partner for the virtual hub. For now, we'll just ignore it and come to this later.

Let's create a Virtual WAN now.

```bash

yumemaru@azure$ az group create -n rg-vwan -l eastus 
{
  "id": "/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/rg-vwan",
  "location": "eastus",
  "managedBy": null,
  "name": "rg-vwan",
  "properties": {
    "provisioningState": "Succeeded"
  },
  "tags": null,
  "type": "Microsoft.Resources/resourceGroups"
}
                 
yumemaru@azure$ az network vwan create -n vwan01 -g rg-vwan -l eastus --type Standard 
{
  "allowBranchToBranchTraffic": true,
  "allowVnetToVnetTraffic": null,
  "disableVpnEncryption": false,
  "etag": "W/\"b777db56-4f32-4f00-94fd-f6fec4d9fbd6\"",
  "id": "/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/rg-vwan/providers/Microsoft.Network/virtualWans/vwan01",
  "location": "eastus",
  "name": "vwan01",
  "office365LocalBreakoutCategory": "None",
  "provisioningState": "Succeeded",
  "resourceGroup": "rg-vwan",
  "tags": null,
  "type": "Microsoft.Network/virtualWans",
  "typePropertiesType": "Standard",
  "virtualHubs": null,
  "vpnSites": null
}

```
After provisioning is completed, we get something similar to the screen below:

![illustration2](/assets/vwan/vwan002.png)

At this point, we have an empty Virtual WAN. To have a look at the routing, we will need a virtual hub. So let's have a look at this.

To deploy a virtual hub, by refering to the az cli documentation, we can quickly identify the required parameters for the virtual hub. On this topic, while the az cli seems to indicate that we need only a name and a resource group, doing so will result in an error. 

```bash

az network vhub create --name
                       --resource-group
                       [--address-prefix]
                       [--allow-b2b-traffic {0, 1, f, false, n, no, t, true, y, yes}]
                       [--asn]
                       [--auto-scale-config]
                       [--hub-routing-preference {ASPath, ExpressRoute, VpnGateway}]
                       [--location]
                       [--no-wait {0, 1, f, false, n, no, t, true, y, yes}]
                       [--sku]
                       [--tags]
                       [--vwan]

```

```bash

yumemaru@azure$ az network vhub create -n vwan01-vhub01 -g rg-vwan
(RouteServerShouldBeStandard) Route Server vwan01-vhub01 should be of Standard SKU.
Code: RouteServerShouldBeStandard
Message: Route Server vwan01-vhub01 should be of Standard SKU.


```

Referencing the target Virtual WAN and the address prefix seems to be additional required parameters.

```bash

df@df2204lts:~$ az network vhub create -n vwan01-vhub01 -g rg-vwan --address-prefix 172.31.254.0/23 --vwan vwan01
{
  "addressPrefix": "172.31.254.0/23",
  "allowBranchToBranchTraffic": false,
  "etag": "W/\"90ba7149-6ad1-4d1b-93aa-b3d0a836a778\"",
  "hubRoutingPreference": "ExpressRoute",
  "id": "/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/rg-vwan/providers/Microsoft.Network/virtualHubs/vwan01-vhub01",
  "location": "eastus",
  "name": "vwan01-vhub01",
  "provisioningState": "Succeeded",
  "resourceGroup": "rg-vwan",
  "routeTable": {
    "routes": []
  },
  "routingState": "Provisioning",
  "type": "Microsoft.Network/virtualHubs",
  "virtualHubRouteTableV2s": [],
  "virtualRouterAsn": 65515,
  "virtualRouterAutoScaleConfiguration": {
    "minCapacity": 2
  },
  "virtualRouterIps": [],
  "virtualWan": {
    "id": "/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/rg-vwan/providers/Microsoft.Network/virtualWans/vwan01",
    "resourceGroup": "rg-vwan"
  }
}

```

It may be interesting to note that thelocation is not a required parameter. It will default to the Virtual WAN region if not specified.

Another interesting point is visible in the output: 

```json

yumemaru@azure$ az network vhub list | jq '.[0].routingState, .[0].virtualRouterIps'
"Provisioning"
[]


```

While the cli (or the protal for that matter) indicate the provisoning completed, there is still a provisioning running under the hood for the routing related resources.
This resource is an Azure Route server, managed inside the virtual hub. That takes some time to be deployed and we need to wait for it before playing with the route.

![illustration3](/assets/vwan/vwan003.png)

After a while, we should see the IPs for the route server.

```json

yumemaru@azure$ az network vhub list | jq '.[0].routingState, .[0].virtualRouterIps'
"Provisioned"
[
  "172.31.254.69",
  "172.31.254.68"
]


```
Before plying a little more with the Hub & Spoke and the routing options, let's have a look at the resource in the terraform provider: 

![illustration4](/assets/vwan/vwan004.png)

While what we identified as the required arguments seems to correspond, we can see that there are also other parameters that are not available either on the terraform provider or the az cli

| Arguments in the az cli only | Arguments in terraform only |
|-|-|
| `--allow-b2b-traffic` | `route` |

As for the security provider argument, we'll come to that later. For now, let's move forward and look at a hub and spokes topology and some basic routing.

2. Deploying a basic Hub and Spokes topology with Virtual WAN

